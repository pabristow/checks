[/ 
Copyright Pierre Talbot 2011.

Use, modification and distribution are subject to the
Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt
or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[import ../example/checks_examples.cpp]
[import ../example/checks_tutorial.cpp]
[import ../example/rtn.hpp]
[import ../example/vin.hpp]

[section:tutorial Tutorial]
In this section, we will quickly learn to use this library. But most important is this quote of Lao Tseu :

["Give a Man a Fish, Feed Him For a Day. Teach a Man to Fish, Feed Him For a Lifetime.]

So we'll also learn to extend this library and create your own check functions.

[section:start Starting with Checks]

There are two main functions for each check system.

* to validate a sequence: `check_<number>`.

* to provides a check digit for a sequence: `compute_<number>`.

All the examples of this section are in the file __CHECKS__EXAMPLE__FILE__.

[h5 Credit card numbers check]

We will start with some credit card numbers checking.

Please first include these headers:

[credit_cards_include_files]

Three credit card checks are implemented: __VISA, __MASTERCARD, and American Express.
The following examples show us how to compute and check numbers:

[checks_example_1]

This provides the output:

[checks_output_1]

[h5 Multi check digits]

Some checks use two check digits, for example, the mod97-10 algorithm used to calculate 
the check digits of the __IBAN.

We add an extra parameter to retrieve the two check digits. The include file is:

[mod97_10_include_file]

and the next example shows us how to use this function:

[checks_example_2]

which provides the output:

[checks_output_2]

[h5 Catching errors]

We will now see how the library reacts with simple errors. 
The first error is that the number of characters (size of sequence)
doesn't fit the requirements. 
The second error shows that some number must respect pattern,
here the three first digit of an ISBN-13 must be "978" or "979".
An exception is throwed if any one of these errors are encountered.
We will use the __EAN and __ISBN headers:
[ean_include_file]
[isbn_include_file]

Two examples of number error:

[checks_example_3]

The output shows us the detailed message the exception provides:

[checks_output_3]

[h5 And with integer array]

The C-arrays of integers are also supported. In the other examples, we check "number" 
but with an ASCII code, we can use integer value as well. The following will show 
us the result of the computation of two same numbers but in different format. 
We'll use the header:

[isbn_include_file]

And the examples:

[checks_example_4]

As you can see in the output, the "X" check digit is represented by its integer value (10)
with the integer C-array:

[checks_output_4]

[endsect] [/section:start Starting with Checks]

[section:extending_the_library Extending the library]

The re-usability of this library is an important feature.
In fact, we can't code every existing check systems - there are dozens of checksums in use worldwide.
This section gives examples of how to extend this library
to cater for existing check systems not yet provided, 
and even to create your own check system.

[h5 Example with the Routing transit number]

We will show how to extend this library with the __RTN. The first thing to do is to
read the check digit calculation procedure. So we can notice few points:

# It is a weighted sum and the weight sequence is: 3,7,1.
# It is using a modulus 10.
# The size of the RTN is 9.

We can create the __RTN__FILE__ file.

The library supports the weighted sum and the modulus 10 algorithm,
so the work will be easy. We can run through the number from right to left or 
left to right (sense) depending on the weight sequence. We will begin with the leftmost digit
because it is more "readable" (at least for Latin language uers).

We need these include files.

[rtn_include_files]
[rtn_preprocessor_tools]

We must put the weights and the sense together into an algorithm type:
[rtn_preprocessor_algorithm]

As the hard part is already done, we can build our check functions now:
[rtn_functions]

And that's all!

[note `boost::checks::compute_checkdigit` and `boost::checks::check_sequence` are both defined in __BASIC__CHECK__FILE__]


We can code a RTN sample in the file __CHECKS__TUTO__FILE__:

[rtn_example]

and the output is:

[rtn_example_output]

[h5 Example with the Vehicle Identification Number (VIN)]

This second example is quite more complex because the __VIN is not a default implemented
check algorithm. Like for the __RTN, we must read the documentation first,
and then we can extract a few elements:

* The number contains letters that must be translated to compute or check the check digit.
* The check digit is not at the end of the number. It's at the 9th position, in the midst of the number.
* The letters Q, I, or O are not valid (presumably to avoid confusion with digits 0 and 1).
* This uses a custom modulus 11 algorithm, so the check digit range is [0..9, X]

The library already has support for modulus 11 algorithm in the header:
``#include <boost/checks/modulus11.hpp>``

We create the __VIN__FILE__ file. Step by step, let's now complete this file.

# The weight sequence is : 2,3,4,5,6,7,8,9,10.
# We run through the sequence from right to left.

We create the types associated with these two observations:
[vin_preprocessor_tools]

We will now attack the harder part of the work: we need to build the adapted structure.
To create our own algorithm, first we need to declare the structure with inheritance:

[vin_struct_header]

The classic modulus 11 algorithm doesn't permit the translation of letters (only the 'x' 
if it's the check digit). But the VIN number uses nearly the full latin alphabet
(they omitted O, Q, and I to avoid confusion with numerals 1 and 0).
We choose to launch the std::invalid_argument exception
(that has the effect of stopping the algorithm)
if one of these letter is encountered.
The other letters must be transformed using this table:

[table:id Letter to digit VIN conversion table
    [[Conversion value] [1] [2] [3] [4] [5] [6] [7] [8] [9] ]
    [[] [A (1)] [B (2)] [C (3)] [D (4)] [E (5)] [F (6)] [G (7)] [H (8)] [ I (N/A) ] ]
    [[] [J (10)] [K (11)] [L (12)] [M (13)] [N (14)] [O (N/A)] [P (16)] [Q (N/A)] [R (18)] ]
    [[] [] [S (19)] [T (20)] [U (21)] [V (22)] [W (23)] [X (24)] [Y (25)] [Z (26)] ] 
]

We need to find an algorithm that converts a letter into its conversion value,
the following  function does the job:

``
X = X % 10 + X/10 + ((X > 18) ? 1 : 0).
``

Also the check digit can only be in the range [0..9,X],
so we choose to launch the std::invalid_argument exception if another letter is read.
With the check digit, and following the modulus 11 algorithm, 
if the check digit is equal to X, the integer value is 10.
But this algorithm is different and we must subtract the check digit from 11.

Let's see the code now:

[vin_translation_module]

The operation function is partially copied from the
function `operate_on_valid_value` in the file __WEIGHTED__SUM__FILE__.
We need to control the fact that the check digit is in the midst of the number. If there is a check digit
into the sequence, we mustn't apply a weight, and we must avoid shift of the full weight sequence for the future iteration. 

[vin_operation_module]

Finally the calculation of the check digit is different from the classic modulus 11 algorithm,
so we need to re-implement it:

[vin_compute_checkdigit]

We can now write the VIN type algorithm:

[vin_preprocessor_algorithm]

And write the functions:

[vin_functions]

[note This algorithm doesn't support full integer array that are not pre-computed (Example: (A) 10 -> 1 ; (M) 13 -> 4).
It can be an exercise for the reader.]

Some basic examples are coded in the file __CHECKS__TUTO__FILE__ .

[vin_example]

that provides the following output:

[vin_example_output]

[endsect] [/section:extending_the_library Extending the library]


[endsect] [/section:tutorial Tutorial]

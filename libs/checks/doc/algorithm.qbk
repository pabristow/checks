[/ 
Copyright Pierre Talbot 2011.

Use, modification and distribution are subject to the
Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt
or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:algorithm Common check algorithms]

This section will discuss the objectives of the algorithms used in Boost.Checks.
A check algorithm is firstly designed to:

# Catch the most errors as possible that a human (or machine) can make.
# Minimize the cost of the check digit for fast computation.
# Minimize the size (or number) of the check digit(s).

We cannot have our cake and eat it, that's why we often choose
between the size or the efficiency.
Critical numbers, for example, the __IBAN, use two check digits.

The main difference with these algorithms (and the other checksum algorithms 
such as CRC or cryptographic hashes) is that we don't analyse the binary 
content of the number of the lexical values meaning, so "123" is equivalent to [~123].

[table:summary Error catching summary
[[][1 Alteration] [2 Alterations] [Twin transpositions] ]
[[Luhn] [18/18 (100%)] [] [88/90 (97.78%)]]
[[Verhoeff] [18/18 (100%)] [] [90/90 (100%)]]
]

[endsect] [/section:algorithm Common check algorithms]

[/ 
Copyright Pierre Talbot 2011.

Use, modification and distribution are subject to the
Boost Software License, Version 1.0.
(See accompanying file LICENSE_1_0.txt
or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:algorithm Common check algorithms]

This section will discuss the objectives of the algorithms used in Boost.Checks.
A check algorithm is firstly designed to:

# Catch the most errors as possible that a human (or machine) can make.
# Minimize the cost of the check digit for fast computation.
# Minimize the size (or number) of the check digit(s).

We cannot have our cake and eat it, that's why we often choose
between the size or the efficiency.
Critical numbers, for example, the __IBAN, use two check digits.

The main difference between these algorithms and the other checksum algorithms 
such as CRC or cryptographic hashes is we don't analyse the binary content of the 
sequence but the lexical values meaning, so "123" is equivalent to [~123]. 
It also means we could skip the undesirable values.

[section:checksum_algorithm Checksum algorithms]

Boost.Checks provides only checksum algorithm excepts for the Verhoeff algorithm.

[h5 Trivial digital sum]

The most basic algorithm we could create is to sum every digit in a sequence.
For example the digit sum of [~58215478] is:
``
5 + 8 + 2 + 1 + 5 + 4 + 7 + 8 = 40
``

The check digit would be [~40] so the complete sequence [~5821547840]. The size of
the check digit grown with the sum. 

[h5 Modular sum]

We must restrict the check digit's size so we take the remainder of the sum by a choosen
modulus. This will impact the range of the check digit. For example, the supports 
for 3 types of modulus is implemented in Boost.Checks, the following table points the 
differents modulus:

[table:modulus_range Modulus impact on check digit range
[ [Modulus] [Check digit range] [Check digit size] ]
[ [10] [ 0 to 9 ] [1] ]
[ [11] [ 0 to 10 ] [1] ]
[ [97] [ 0 to 96 ] [2] ]
]

The range of the modulus 11 is restrained to an unique check digit where [~10] is replaced 
by another character (commonly the letter 'X').

[h5 Weighted sum]

The simple sum is a fiasco for detecting transposition errors. The proof is simple: the 
addition is ['commutative], so the digit order is not important. The solution is to 
attribute fixed ['weight] to each position.

The choice of the weight pattern should respect the following statements:

# The weights must be less than the modulus. The explanation is:

``
If weight = modulus, than weight = 0 because weight * C % modulus = modulus % modulus = 0
So if weight = modulus + n, than weight = n % modulus because weight * C % modulus = (modulus + n) % modulus = n % modulus.
``

It proves that a weight has the same impact on the checksum as the same weight plus the modulus.

# A weight must be coprime to the modulus. It means the greatest common divisor between 
the weight and the modulus is 1. If a and b are not coprime to the modulus, than 
it exists a number n that verify the following equation:

``
a * n % modulus = b * n % modulus
``

And this number is a common divisor between a,b and the modulus.

[note By consequence, all prime modulus can use any weights because they are all coprime.]

[h5 Luhn algorithm]

It's a weighted sum with a modulus 10 and a weight pattern of '12'. The sum is computed from 
right to left. The peculiarity of this algorithm is the treatment on the digits weighted. For 
example, when the weight multiply by the digit exceeds 9, we substract 9 from it. This scheme 
catches every transposition but 9 and 0. It's because 9*2 = 18 and 18-9 = 9. So 9 multiply by 
the weight '1' give the same result than multiply it by the weight '2'.

[endsect] [/section:checksum_algorithm Checksum algorithms]

[section:verhoeff_algorithm Verhoeff algorithm]

The Verhoeff algorithm has been designed to catch all transpositions of two adjacent digits and 
all alterations. It produces a single check digit. Badly, this check can't easily be performed by 
hand from memory.

It uses the properties of the dihedral group D5, the elements in this group are not commutative. 
Whatever the manner we can compute these elements, we use three precomputed tables: d, p and inv. 

[endsect] 

[endsect] [/section:algorithm Common check algorithms]
